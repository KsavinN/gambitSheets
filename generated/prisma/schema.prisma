// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  // It should point to the node_modules of the 'database' package itself.
  output        = "../generated/prisma"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Sport {
  id           String   @id @default(cuid())
  key          String   @unique // From API: "americanfootball_nfl"
  active       Boolean // From API: true
  group        String // From API: "American Football"
  description  String // From API: "US Football"
  title        String // From API: "NFL"
  hasOutrights Boolean // From API: false
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  events Event[] // Relation to multiple events
}

model Event {
  id               String           @id // From API: "e912304de2b2ce35b473ce2ecd3d1502"
  sportKey         String // From API: "americanfootball_nfl"
  sportTitle       String // From API: "NFL" - consider if this should be derived or stored
  commenceTime     DateTime // From API: "2023-10-11T23:10:00Z"
  homeTeam         String // From API: "Houston Texans"
  awayTeam         String // From API: "Kansas City Chiefs"
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  sport            Sport            @relation(fields: [sportKey], references: [key])
  bookmakerEntries BookmakerEntry[]
}

model BookmakerEntry {
  id         String   @id @default(cuid())
  event      Event    @relation(fields: [eventId], references: [id])
  eventId    String
  key        String // From API: "draftkings"
  title      String // From API: "DraftKings"
  lastUpdate DateTime // From API: "2023-10-10T12:10:29Z"
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  markets    Market[]

  @@unique([eventId, key]) // Ensure a bookmaker is unique per event
}

model Market {
  id               String         @id @default(cuid())
  bookmakerEntry   BookmakerEntry @relation(fields: [bookmakerEntryId], references: [id])
  bookmakerEntryId String
  key              String // From API: "h2h"
  lastUpdate       DateTime // From API: "2023-10-10T12:10:29Z"
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  outcomes         Outcome[]

  @@unique([bookmakerEntryId, key]) // Ensure a market is unique per bookmaker entry
}

model Outcome {
  id        String   @id @default(cuid())
  market    Market   @relation(fields: [marketId], references: [id])
  marketId  String
  name      String // From API: "Houston Texans"
  price     Float // From API: 2.23 (Using Float, consider Decimal for precision if needed)
  point     Float? // Fromp API: 1 (its used in spread)
  betLimit  Float? // Optional: From API, if includeBetLimits=true
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([marketId, name]) // Ensure an outcome name is unique per market
}
